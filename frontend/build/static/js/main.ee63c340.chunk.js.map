{"version":3,"sources":["constants/productConstants.js","constants/userConstants.js","constants/cartConstants.js","constants/orderConstants.js","store.js","reducers/productReducers.js","reducers/userReducers.js","reducers/cartReducers.js","reducers/orderReducers.js","components/header/SearchBox.js","constants/domainConstants.js","components/shared/Csrf.js","components/header/Header.js","actions/userActions.js","components/footer/Footer.js","components/product/Rating.js","components/product/Product.js","components/product/Paginate.js","components/shared/Loader.js","components/shared/Message.js","components/product/ProductCarousel.js","actions/productActions.js","screens/home/HomeScreen.js","components/shared/FormContainer.js","screens/user/LoginScreen.js","screens/user/RegisterScreen.js","screens/user/ProfileScreen.js","actions/orderActions.js","screens/product/ProductScreen.js","actions/cartActions.js","screens/cart/CartScreen.js","components/cart/CheckoutSteps.js","screens/cart/ShippingScreen.js","screens/cart/PaymentScreen.js","screens/cart/PlaceOrderScreen.js","screens/cart/OrderScreen.js","App.js","reportWebVitals.js","index.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_CREATE_REVIEW_REQUEST","PRODUCT_CREATE_REVIEW_SUCCESS","PRODUCT_CREATE_REVIEW_FAIL","PRODUCT_CREATE_REVIEW_RESET","PRODUCT_TOP_REQUEST","PRODUCT_TOP_SUCCESS","PRODUCT_TOP_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_CLEAR_ITEMS","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_CREATE_RESET","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","ORDER_PAY_RESET","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_MY_FAIL","ORDER_LIST_MY_RESET","reducer","combineReducers","productList","state","products","action","type","loading","payload","items","page","pages","error","productDetails","product","reviews","productReviewCreate","success","productTopRated","userLogin","userInfo","userRegister","userDetails","user","userUpdateProfile","cart","cartItems","shippingAddress","item","existItem","find","obj","id","map","filter","paymentMethod","orderCreate","order","orderDetails","orderPay","orderListMy","orders","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","SearchBox","props","useState","keyword","setKeyword","history","useHistory","Form","className","onSubmit","event","preventDefault","push","location","pathname","console","log","classes","cname","inline","Control","name","onChange","target","value","Button","variant","domainURL","csrftoken","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","Header","useSelector","dispatch","useDispatch","Navbar","bg","expand","collapseOnSelect","Container","to","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","first_name","Item","onClick","removeItem","Footer","Rating","text","color","style","Product","classProp","Card","Img","src","image","file","Body","Title","as","Text","rating","quantity_reviews","price","Paginate","urlParams","Pagination","Array","keys","pageKey","active","Loader","Spinner","animation","role","height","width","margin","display","Message","children","Alert","ProductCarousel","useEffect","a","axios","get","data","response","detail","message","Carousel","pause","Image","alt","fluid","Caption","HomeScreen","search","pageParam","URLSearchParams","listProducts","Row","Col","sm","md","lg","xl","FormContainer","xs","LoginScreen","email","setEmail","password","setPassword","redirect","config","headers","post","setItem","stringify","login","Group","controlId","Label","placeholder","RegisterScreen","setName","confirmPassword","setConfirmPassword","setMessage","register","required","ProfileScreen","loadingOrders","errorOrders","idOrPage","last_name","getState","Authorization","token","catch","userData","put","Table","striped","responsive","created_at","total_price","is_paid","paid_at","ProductScreen","match","quantity","setQuantity","setRating","comment","setComment","loadingProductReview","successProductReview","errorProductReview","params","ListGroup","n","dangerouslySetInnerHTML","__html","description","quantity_in_stock","e","currentCount","disabled","review_data","review","productId","row","addToCart","countInStock","CartScreen","Number","removeFromCartHandler","removeFromCart","rounded","reduce","accumulator","toFixed","CheckoutSteps","step1","step2","step3","step4","ShippingScreen","address","setAddress","city","setCity","postalCode","setPostalCode","country","setCountry","PaymentScreen","setPaymentMethod","Check","label","checked","PlaceOrderScreen","itemsPrice","acc","shippingPrice","parseFloat","taxPrice","totalPrice","index","createOrder","shipping_address","payment_method","items_price","shipping_price","tax_price","orderId","sdkReady","setSdkReady","loadingPay","successPay","window","paypal","script","createElement","async","onload","body","appendChild","addPayPalScript","user_data","shipping_address_data","is_delivered","delivered_at","amount","onSuccess","paymentResult","payOrder","App","exact","path","component","OrderScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ee63c340.chunk.js","sourcesContent":["// Item constants for determining actions.\r\n\r\n// Home page constants\r\nexport const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST'\r\nexport const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS'\r\nexport const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL'\r\n\r\n// Detail page constants\r\nexport const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST'\r\nexport const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS'\r\nexport const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL'\r\n\r\n// Item update constants\r\nexport const PRODUCT_CREATE_REVIEW_REQUEST = 'PRODUCT_CREATE_REVIEW_REQUEST'\r\nexport const PRODUCT_CREATE_REVIEW_SUCCESS = 'PRODUCT_CREATE_REVIEW_SUCCESS'\r\nexport const PRODUCT_CREATE_REVIEW_FAIL = 'PRODUCT_CREATE_REVIEW_FAIL'\r\nexport const PRODUCT_CREATE_REVIEW_RESET = 'PRODUCT_CREATE_REVIEW_RESET'\r\n\r\n// Top item constants\r\nexport const PRODUCT_TOP_REQUEST = 'PRODUCT_TOP_REQUEST'\r\nexport const PRODUCT_TOP_SUCCESS = 'PRODUCT_TOP_SUCCESS'\r\nexport const PRODUCT_TOP_FAIL = 'PRODUCT_TOP_FAIL'","// User constants for determining what action to take.\r\n\r\n// Login\r\nexport const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST'\r\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\r\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL'\r\nexport const USER_LOGOUT = 'USER_LOGOUT'\r\n\r\n// Register\r\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST'\r\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS'\r\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL'\r\n\r\n// User Details\r\nexport const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST'\r\nexport const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS'\r\nexport const USER_DETAILS_FAIL = 'USER_DETAILS_FAIL'\r\nexport const USER_DETAILS_RESET = 'USER_DETAILS_RESET'\r\n\r\n// User Profile\r\nexport const USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST'\r\nexport const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS'\r\nexport const USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL'\r\nexport const USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET'","// Cart constants for determining actions.\r\n\r\n// Customer Cart\r\nexport const CART_ADD_ITEM = 'CART_ADD_ITEM'\r\nexport const CART_REMOVE_ITEM = 'CART_REMOVE_ITEM'\r\n\r\n// Customer Shipping\r\nexport const CART_SAVE_SHIPPING_ADDRESS = 'CART_SAVE_SHIPPING_ADDRESS'\r\nexport const CART_SAVE_PAYMENT_METHOD = 'CART_SAVE_PAYMENT_METHOD'\r\n\r\n// Customer Payment\r\nexport const CART_CLEAR_ITEMS = 'CART_CLEAR_ITEMS'","// Order constants for determining actions.\r\n\r\n// Order/Cart Create\r\nexport const ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST'\r\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS'\r\nexport const ORDER_CREATE_FAIL = 'ORDER_CREATE_FAIL'\r\nexport const ORDER_CREATE_RESET = 'ORDER_CREATE_RESET'\r\n\r\n// Order/Cart Details\r\nexport const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST'\r\nexport const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS'\r\nexport const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL'\r\n\r\n// Order/Cart Pay\r\nexport const ORDER_PAY_REQUEST = 'ORDER_PAY_REQUEST'\r\nexport const ORDER_PAY_SUCCESS = 'ORDER_PAY_SUCCESS'\r\nexport const ORDER_PAY_FAIL = 'ORDER_PAY_FAIL'\r\nexport const ORDER_PAY_RESET = 'ORDER_PAY_RESET'\r\n\r\n// Order/Cart List\r\nexport const ORDER_LIST_MY_REQUEST = 'ORDER_LIST_MY_REQUEST'\r\nexport const ORDER_LIST_MY_SUCCESS = 'ORDER_LIST_MY_SUCCESS'\r\nexport const ORDER_LIST_MY_FAIL = 'ORDER_LIST_MY_FAIL'\r\nexport const ORDER_LIST_MY_RESET = 'ORDER_LIST_MY_RESET'","// Mainly Redux. Creates a store that holds the entire state tree of your app.\r\n// It is closely linked with Redux's reducers.\r\n// store.js is loaded on every page.\r\n\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { productListReducer, productDetailsReducer, productReviewCreateReducer, productTopRatedReducer } from './reducers/productReducers'\r\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducers'\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers'\r\n\r\n\r\n// Register reducers and collates them into a single constant.\r\n// Should show up in the state.\r\nconst reducer = combineReducers({ \r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productReviewCreate: productReviewCreateReducer,\r\n    productTopRated: productTopRatedReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    cart: cartReducer,\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderListMy: orderListMyReducer,\r\n})\r\n\r\n// Pull cart data from local storage and parse it.\r\n// Add conditional to check if the item still exists.\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems'))\r\n    : []\r\n\r\n// Pull user data from local storage and parse it.\r\n// Add conditional to check if the data still exists.\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo'))\r\n    : null\r\n\r\n// Pull user data from local storage and parse it.\r\n// Add conditional to check if the data still exists.\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress'))\r\n    : {}\r\n\r\n// Set initial state, which has a number of values. Set the cart state to whatever is in local storage for the user with respect to their carts.\r\n// Makes this data available for all pages.\r\nconst initialState = {\r\n    cart: {\r\n        cartItems: cartItemsFromStorage,\r\n        shippingAddress: shippingAddressFromStorage\r\n    },\r\n    userLogin: { userInfo: userInfoFromStorage }\r\n}\r\n\r\n// Define middleware as thunk, which interfaces with the redux devtools on Firefox.\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store","// Reducers are functions that tie actions and states together and allows them to interact.\r\n\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n    PRODUCT_CREATE_REVIEW_RESET,\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n} from '../constants/productConstants'\r\n\r\n\r\n// Reducers initiate the state and changes the state according to the actions\r\n// it receives from the actions that were dispatched.\r\n\r\nexport const productListReducer = (state = { products: [] }, action) => {\r\n    \r\n    // Depending on the action type, do something.\r\n    switch(action.type) {\r\n\r\n        // Case when products are loading.\r\n        case PRODUCT_LIST_REQUEST:\r\n            return { loading: true, products: [] }\r\n\r\n        // Case when product loading is complete.\r\n        case PRODUCT_LIST_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                products: action.payload.items,\r\n                page: action.payload.page,\r\n                pages: action.payload.pages\r\n            }\r\n\r\n        // Case when there is an error getting the products data.\r\n        case PRODUCT_LIST_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const productDetailsReducer = (state = { product: {reviews: []} }, action) => {\r\n    \r\n    // Depending on the action type, do something.\r\n    switch(action.type) {\r\n\r\n        // Case when products are loading.\r\n        case PRODUCT_DETAILS_REQUEST:\r\n            return { loading: true, product: {} }\r\n\r\n        // Case when product loading is complete.\r\n        case PRODUCT_DETAILS_SUCCESS:\r\n            return { loading: false, product: action.payload }\r\n\r\n        // Case when there is an error getting the products data.\r\n        case PRODUCT_DETAILS_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const productReviewCreateReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n\r\n        case PRODUCT_CREATE_REVIEW_REQUEST:\r\n            return { loading: true }\r\n\r\n        case PRODUCT_CREATE_REVIEW_SUCCESS:\r\n            return { loading: false, success: true }\r\n\r\n        case PRODUCT_CREATE_REVIEW_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case PRODUCT_CREATE_REVIEW_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const productTopRatedReducer = (state = { products: [] }, action) => {\r\n    switch(action.type) {\r\n\r\n        case PRODUCT_TOP_REQUEST:\r\n            return { loading: true, products: [] }\r\n\r\n        case PRODUCT_TOP_SUCCESS:\r\n            return { loading: false, products: action.payload }\r\n\r\n        case PRODUCT_TOP_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","// Reducers are functions that tie actions and states together and allows them to interact.\r\n\r\nimport { \r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET\r\n} from '../constants/userConstants'\r\n\r\n\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    \r\n    // Depending on the action type, do something.\r\n    switch(action.type) {\r\n\r\n        // Case when \r\n        case USER_LOGIN_REQUEST:\r\n            return { loading: true }\r\n\r\n        // Case when \r\n        case USER_LOGIN_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n\r\n        // Case when \r\n        case USER_LOGIN_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        // Case when \r\n        case USER_LOGOUT:\r\n            // Resets the state\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userRegisterReducer = (state = {}, action) => {\r\n    \r\n    // Depending on the action type, do something.\r\n    switch(action.type) {\r\n\r\n        // Case when \r\n        case USER_REGISTER_REQUEST:\r\n            return { loading: true }\r\n\r\n        // Case when \r\n        case USER_REGISTER_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n\r\n        // Case when \r\n        case USER_REGISTER_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        // Case when \r\n        case USER_LOGOUT:\r\n            // Resets the state\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n    \r\n    // Depending on the action type, do something.\r\n    switch(action.type) {\r\n\r\n        // Case when \r\n        case USER_DETAILS_REQUEST:\r\n            // ...state, a spread operator, is the initial state\r\n            return { ...state, loading: true }\r\n\r\n        // Case when \r\n        case USER_DETAILS_SUCCESS:\r\n            return { loading: false, user: action.payload }\r\n\r\n        // Case when \r\n        case USER_DETAILS_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        // Case when \r\n        case USER_DETAILS_RESET:\r\n            return { user: { } }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userUpdateProfileReducer = (state = { }, action) => {\r\n    \r\n    // Depending on the action type, do something.\r\n    switch(action.type) {\r\n\r\n        // Case when \r\n        case USER_UPDATE_PROFILE_REQUEST:\r\n            // ...state, a spread operator, is the initial state\r\n            return { loading: true }\r\n\r\n        // Case when \r\n        case USER_UPDATE_PROFILE_SUCCESS:\r\n            return { loading: false, success: true, userInfo: action.payload }\r\n\r\n        // Case when \r\n        case USER_UPDATE_PROFILE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        // Case when \r\n        case USER_UPDATE_PROFILE_RESET:\r\n            return { }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","// Reducers initiate the state and changes the state according to the actions\r\n// it receives from the actions that were dispatched.\r\n\r\nimport {\r\n    CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n\r\n    CART_CLEAR_ITEMS\r\n} from '../constants/cartConstants'\r\n\r\n\r\nexport const cartReducer = ( state = { cartItems: [], shippingAddress: {} }, action ) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case CART_ADD_ITEM:\r\n            \r\n            const item = action.payload\r\n            const existItem = state.cartItems.find( (obj) => obj.id === item.id)\r\n\r\n            // If item exists\r\n            if (existItem) {\r\n\r\n                return {\r\n\r\n                    // Returns previous state\r\n                    ...state,\r\n\r\n                    // Loop through array and see if a cart item matches the new item. Replace the matching item with the new item.\r\n                    // If the item we got from \"item\" matches an existing item, only use the new \"item\" const. If not, return the original.\r\n                    cartItems: state.cartItems.map( (obj) => \r\n                        obj.id === existItem.id ? item : obj\r\n                    )\r\n                }\r\n            }\r\n            else {\r\n\r\n                return {\r\n\r\n                    // Returns previous state\r\n                    ...state,\r\n\r\n                    // Return original cart items\r\n                    cartItems: [...state.cartItems, item]\r\n                }\r\n            }\r\n        \r\n        case CART_REMOVE_ITEM:\r\n\r\n            return {\r\n\r\n                ...state,\r\n\r\n                // Filter out any items that doesn't match what's in the Redux action object.\r\n                // Returns an array without the deleted item.\r\n                cartItems: state.cartItems.filter( (item) => item.id !== action.payload )\r\n            }\r\n\r\n        case CART_SAVE_SHIPPING_ADDRESS:\r\n\r\n            return {\r\n\r\n                // Returns previous state\r\n                ...state,\r\n\r\n                // Add the shippingAddress variable to the state.\r\n                shippingAddress: action.payload\r\n            }\r\n\r\n        case CART_SAVE_PAYMENT_METHOD:\r\n\r\n            return {\r\n\r\n                // Returns previous state\r\n                ...state,\r\n\r\n                // Add the paymentMethod variable to the state under cart.\r\n                paymentMethod: action.payload\r\n            }\r\n\r\n        case CART_CLEAR_ITEMS:\r\n            return {\r\n                ...state,\r\n                cartItems: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { \r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_CREATE_RESET,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n} from '../constants/orderConstants'\r\n\r\n\r\nexport const orderCreateReducer = ( state = {}, action ) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ORDER_CREATE_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_CREATE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                order: action.payload\r\n            }\r\n\r\n        case ORDER_CREATE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_CREATE_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const orderDetailsReducer = ( state = { loading:true, cartItems:[], shippingAddress:{} }, action ) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ORDER_DETAILS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                order: action.payload\r\n            }\r\n\r\n        case ORDER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const orderPayReducer = ( state = {}, action ) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ORDER_PAY_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_PAY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                success: true\r\n            }\r\n\r\n        case ORDER_PAY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_PAY_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const orderListMyReducer = ( state = { orders: [] }, action ) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ORDER_LIST_MY_REQUEST:\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case ORDER_LIST_MY_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                orders: action.payload\r\n            }\r\n\r\n        case ORDER_LIST_MY_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case ORDER_LIST_MY_RESET:\r\n            return {\r\n                orders: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport './css/header.css'\r\n\r\n\r\nfunction SearchBox(props) {\r\n\r\n    // Initialize page-specific state variables\r\n    const [keyword, setKeyword] = useState('')\r\n\r\n    // Searchbox is not a page, so we cannot destructure the variables\r\n    // and get history from it. So we use useHistory() instead.\r\n    let history = useHistory()\r\n\r\n    const submitHandler = (event) => {\r\n        \r\n        event.preventDefault()\r\n\r\n        // If keyword isn't empty, begin search, or go back to home page.\r\n        if (keyword) {\r\n\r\n            history.push(`/?keyword=${keyword}&page=1`)\r\n        }\r\n        // If there's no keywords, send the user back to their original page.\r\n        else {\r\n\r\n            history.push(history.push(history.location.pathname))\r\n        }\r\n\r\n    const getFormClasses = () => {\r\n        \r\n        let classes = props.cname ? props.cname : ''\r\n        classes += \"searchbox\"\r\n        return classes\r\n    }\r\n\r\n    console.log('getFormClasses', getFormClasses)\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Form className=\"searchbox\" onSubmit={ submitHandler } inline>\r\n            <Form.Control\r\n                type=\"text\"\r\n                name=\"q\"\r\n                onChange={ (event) => setKeyword(event.target.value) }\r\n                className=\"searchbox__form mr-sm-2 ml-sm-5\"\r\n            >\r\n            </Form.Control>\r\n\r\n            <Button\r\n                type=\"submit\"\r\n                variant=\"outline-success\"\r\n                className=\"searchbox__btn p-2\"\r\n            >\r\n                Search\r\n            </Button>\r\n        </Form>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","// Domain Constants\r\n\r\n//export const domainURL = 'http://localhost:8000'\r\nexport const domainURL = 'https://brickshop-emporium.herokuapp.com'","function getCookie(name) {\r\n\r\n    let cookieValue = null;\r\n\r\n    if (document.cookie && document.cookie !== '') {\r\n\r\n        const cookies = document.cookie.split(';');\r\n\r\n        for (let i = 0; i < cookies.length; i++) {\r\n\r\n            const cookie = cookies[i].trim();\r\n\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport const csrftoken = getCookie('csrftoken');","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navbar, Nav, NavDropdown, Container } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nimport SearchBox from './SearchBox'\r\n\r\nimport { logout } from '../../actions/userActions'      // Actions -> Reducers -> Change state\r\n\r\nimport './css/header.css'\r\n\r\nfunction Header() {\r\n\r\n    // Grab from the state the userInfo\r\n    const userLogin = useSelector( (state) => state.userLogin )\r\n    const { userInfo } = userLogin\r\n\r\n    // A redux hook that dispatches an action. Like setState, but redux\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Logs the user out when he/she clicks the login button from the header.\r\n    const logoutHandler = () => {\r\n\r\n        // Dispatch the logout action, which then connects to the reducer, and finally the state update.\r\n        dispatch( logout() )\r\n    }\r\n\r\n    return (\r\n\r\n        <header className=\"header\">\r\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\r\n                <Container>\r\n\r\n                    <LinkContainer to='/'>\r\n                        <Navbar.Brand href=\"/\">Brickshop Bazaar</Navbar.Brand>\r\n                    </LinkContainer>\r\n                    \r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\" className=\"navbar__right\">\r\n                        <SearchBox />\r\n                        <Nav className=\"navbar__right__icons ml-auto\">\r\n                            <LinkContainer to=\"/cart\">\r\n                                <Nav.Link href=\"/cart\"><i className=\"fas fa-shopping-cart\">&nbsp;</i>Cart</Nav.Link>\r\n                            </LinkContainer>\r\n\r\n                            {\r\n                                userInfo ? (\r\n                                    <NavDropdown title={userInfo.first_name} id='username' className=\"navbar__items__item\">\r\n                                        <LinkContainer to=\"/profile\">\r\n                                            <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n\r\n                                        <NavDropdown.Item onClick={ logoutHandler }>Logout</NavDropdown.Item>\r\n                                    </NavDropdown>\r\n                                ) : (\r\n\r\n                                    <LinkContainer to=\"/login\" >\r\n                                        <Nav.Link><i className=\"fas fa-user\">&nbsp;</i>Login</Nav.Link>\r\n                                    </LinkContainer>\r\n                                )\r\n                                    \r\n                            }\r\n\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                    \r\n                </Container>\r\n\r\n            </Navbar>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default Header\r\n","// After being dispatched, the action will update the state and do other logic.\r\n\r\nimport axios from 'axios'\r\n\r\nimport { \r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    //USER_UPDATE_PROFILE_RESET\r\n} from '../constants/userConstants'\r\nimport { domainURL } from '../constants/domainConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\nimport { csrftoken } from '../components/shared/Csrf'\r\n\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        // Send additional data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken\r\n            }\r\n        }\r\n\r\n        // Make API call to the JWT login with the user's username (email) and password\r\n        const { data } = await axios.post(\r\n            `${domainURL}/api/v1/users/login/`,\r\n            {'username': email, 'password': password},\r\n            config\r\n        )\r\n\r\n        console.log('login data:', data)\r\n\r\n        // Get the user data after making the API login call.\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // Save the user data to the user's browser local storage.\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n\r\n    // Log the user out by removing the userInfo from the local storage.\r\n    // Need to also update the state (done in userReducers.js).\r\n    localStorage.removeItem('userInfo')\r\n\r\n    // Send signal to userReducer to update the state by emptying the userInfo variable there.\r\n    dispatch({\r\n        type: USER_LOGOUT\r\n    })\r\n\r\n    // Send signal to userReducer to empty the state after logging out.\r\n    // Prevents the bug that after logging out, the previous logged-in user's\r\n    // information will be displayed in the profile of the new logged in user!\r\n    dispatch({\r\n        type: USER_DETAILS_RESET\r\n    })\r\n\r\n    // Clear the orders variable from the orderListMy state variable.\r\n    dispatch({\r\n        type: ORDER_LIST_MY_RESET\r\n    })\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken\r\n            }\r\n        }\r\n\r\n        // Make API call to the JWT register with the user's name, email, and password.\r\n        // Due to view logic, will split two names as first_name and last_name. If one\r\n        // is given, leave last_name blank and fill in first_name.\r\n        const {data} = await axios.post(\r\n            `${domainURL}/api/v1/users/register/`,\r\n            { 'name': name, 'email': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        console.log('register data = ', data)\r\n\r\n        // Get the user data after making the API login call.\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // Login the user immediately after registering.\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // Save the user data to the user's browser local storage.\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (idOrPage) => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // userReducers.js case\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `${domainURL}/api/v1/users/${idOrPage}/`,\r\n            config\r\n        )\r\n\r\n        // Get the user data after making the API profile update call. Calls the reducer to update the state.\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (userData) => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // userReducers.js case\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        // Update the user data and store that in a variable 'data', which is fetched from the API via axios.\r\n        // API takes in name, email and password.\r\n        const { data } = await axios.put(\r\n            `${domainURL}/api/v1/users/profile/update/`,\r\n            userData,\r\n            config\r\n        )\r\n\r\n        // Get the user data after making the API profile update call. Calls the reducer to update the state.\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // logs the user in with the new updated data. Calls the right reducer.\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // Save the user data to the user's browser local storage after updating\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nimport './css/footer.css'\r\n\r\nfunction Footer() {\r\n\r\n    return (\r\n\r\n        <footer className=\"footer\">\r\n            <div className=\"footer__content\">\r\n                <h1 className=\"footer__content__title\">Brickshop Bazaar</h1>\r\n                <p className=\"footer__content__copyright\">\r\n                    Copyright &copy; Brickshop Emporioum\r\n                </p>\r\n            </div>\r\n\r\n        </footer>\r\n\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\nimport './css/product.css'\r\n\r\nfunction Rating({ value, text, color }) {\r\n\r\n    return (\r\n\r\n        <div className=\"rating\">\r\n            <span>\r\n                <i className={\r\n                    value >= 1\r\n                    ? 'fas fa-star'\r\n                    : value >= 0.5\r\n                        ? 'fas fa-star-half-alt'\r\n                        : 'far fa-star'\r\n                } \r\n                style={{ color }}>\r\n\r\n                </i>\r\n            </span>\r\n\r\n            <span>\r\n                <i className={\r\n                    value >= 2\r\n                    ? 'fas fa-star'\r\n                    : value >= 1.5\r\n                        ? 'fas fa-star-half-alt'\r\n                        : 'far fa-star'\r\n                } \r\n                style={{ color }}>\r\n\r\n                </i>\r\n            </span>\r\n\r\n            <span>\r\n                <i className={\r\n                    value >= 3\r\n                    ? 'fas fa-star'\r\n                    : value >= 2.5\r\n                        ? 'fas fa-star-half-alt'\r\n                        : 'far fa-star'\r\n                } \r\n                style={{ color }}>\r\n\r\n                </i>\r\n            </span>\r\n\r\n            <span>\r\n                <i className={\r\n                    value >= 4\r\n                    ? 'fas fa-star'\r\n                    : value >= 3.5\r\n                        ? 'fas fa-star-half-alt'\r\n                        : 'far fa-star'\r\n                } \r\n                style={{ color }}>\r\n\r\n                </i>\r\n            </span>\r\n\r\n            <span>\r\n                <i className={\r\n                    value >= 5\r\n                    ? 'fas fa-star'\r\n                    : value >= 4.5\r\n                        ? 'fas fa-star-half-alt'\r\n                        : 'far fa-star'\r\n                } \r\n                style={{ color }}>\r\n\r\n                </i>\r\n            </span>\r\n            \r\n            <span>{ text && text }</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Rating\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'     // Using Link instead of the a tag allows loading components of a specific page rather than triggering a full page reload.\r\n\r\nimport Rating from './Rating'\r\n\r\nimport './css/product.css'\r\n\r\n\r\nfunction Product({ product, classProp }) {\r\n\r\n    return (\r\n\r\n        <Card className=\"my-3 p-3 rounded\">\r\n            <Link to={`/product/${product.id}`}>\r\n                <Card.Img className={classProp} src={product?.image?.file ?? \"\"} />\r\n            </Link>\r\n\r\n            <Card.Body>\r\n                <Link to={`/product/${product.id}`}>\r\n                    <Card.Title as=\"div\">\r\n                        <strong>{product.title}</strong>\r\n                    </Card.Title>\r\n                </Link>\r\n\r\n                <Card.Text as=\"div\">\r\n                    <div className=\"my-3\">\r\n                        {product.rating} from {product.quantity_reviews} reviews\r\n                    </div>\r\n\r\n                    <Rating value={product.rating} text={`${product.quantity_reviews} reviews`} color={'#f8e825'} />\r\n                </Card.Text>\r\n\r\n                <Card.Text as=\"h3\">\r\n                    ${product.price}\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default Product\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\n\r\nfunction Paginate({ pages, page, urlParams='' }) {\r\n\r\n    let keyword = ''\r\n\r\n    if (urlParams) {\r\n\r\n        // Trim keyword to contain only the keyword value\r\n        keyword = urlParams.split('?keyword=')[1].split('&')[0]\r\n    }\r\n    \r\n    return (\r\n        pages > 1 && (\r\n\r\n            <Pagination>\r\n                {\r\n                    [...Array(pages).keys()].map( (pageKey) => (\r\n\r\n                        <LinkContainer\r\n                            key={pageKey + 1}\r\n                            to={`/?keyword=${keyword}&page=${pageKey + 1}`}\r\n                        >\r\n                            <Pagination.Item active={pageKey + 1 === page}>{ pageKey + 1 }</Pagination.Item>\r\n                        </LinkContainer>\r\n                    ))\r\n                }\r\n            </Pagination>\r\n\r\n        )\r\n    )\r\n}\r\n\r\nexport default Paginate\r\n","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nfunction Loader() {\r\n\r\n    return (\r\n\r\n        <Spinner\r\n            animation=\"border\"\r\n            role=\"status\"\r\n            style={{ \r\n                height: '100px',\r\n                width: '100px',\r\n                margin: 'auto',\r\n                display: 'block'\r\n            }}>\r\n\r\n                <span className=\"sr-only\">Loading...</span>\r\n\r\n        </Spinner>\r\n\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nfunction Message({ variant, children }) {\r\n\r\n    return (\r\n\r\n        <Alert variant={variant}>\r\n            {children}\r\n        </Alert>\r\n\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Carousel, Image } from 'react-bootstrap'\r\n\r\nimport Loader from '../shared/Loader'\r\nimport Message from '../shared/Message'\r\n\r\nimport { listTopProducts } from '../../actions/productActions'\r\n\r\nimport './css/product.css'\r\n\r\nfunction ProductCarousel() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productTopRated = useSelector(state => state.productTopRated)\r\n    const { loading, products, error } = productTopRated\r\n\r\n    useEffect( () => {\r\n\r\n        dispatch(listTopProducts())\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n        loading ? <Loader />\r\n            : error ? <Message variant=\"danger\">{ error }</Message>\r\n            : (\r\n                <Carousel pause=\"hover\" className=\"bg-dark\">\r\n                    {\r\n                        products.map( (product) => (\r\n\r\n                            <Carousel.Item key={product.id}>\r\n                                <Link to={`/product/${product.id}/`}>\r\n                                    <Image src={product.image.file} alt={product.title} fluid />\r\n                                    <Carousel.Caption className=\"carousel.caption\">\r\n                                        <h4>{ product.title } (${product.price})</h4>\r\n                                    </Carousel.Caption>\r\n                                </Link>\r\n                            </Carousel.Item>\r\n                        ))\r\n                    }\r\n                </Carousel>\r\n            )\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ProductCarousel\r\n","// After being dispatched, the action will update the state and do other logic.\r\n\r\nimport axios from 'axios'\r\n\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n    \r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n} from '../constants/productConstants'\r\nimport { domainURL } from '../constants/domainConstants'\r\n\r\nimport { csrftoken } from '../components/shared/Csrf'\r\n\r\n\r\n// In charge of replacing the API call in the homescreen\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_LIST_REQUEST\r\n        })\r\n\r\n        // Fetch the API items data with axios\r\n        const { data } = await axios.get(`${domainURL}/api/v1/items/${keyword}`)\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    }\r\n    catch(error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        // Detail comes from the error message from api.views.UserCreateView() and is a custom message.\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message,\r\n\r\n        })\r\n    }\r\n}\r\n\r\n// In charge of replacing the API call in the item detail page\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_REQUEST\r\n        })\r\n\r\n        // Fetch the API items data with axios\r\n        const { data } = await axios.get(`${domainURL}/api/v1/item/${id}`)\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    }\r\n    catch(error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n//\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // Dispatch the request, which will return loading=true\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        // Send POST review data to the API for serialization and object saving to the database.\r\n        await axios.post(\r\n            `${domainURL}/api/v1/item/${productId}/reviews/`,\r\n            review,\r\n            config\r\n        )\r\n\r\n        // Dispatch the success action and pass on the data via the payload\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            //payload: data       // @ todo: this is not needed? Reducer doesn't take in data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_TOP_REQUEST\r\n        })\r\n\r\n        // Fetch the API items data with axios\r\n        const { data } = await axios.get(`${domainURL}/api/v1/items/top/`)\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n    }\r\n    catch(error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        // Detail comes from the error message from api.views.UserCreateView() and is a custom message.\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message,\r\n\r\n        })\r\n    }\r\n}","import React, { /* useState, */ useEffect } from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport Product from '../../components/product/Product'\r\nimport Paginate from '../../components/product/Paginate'\r\nimport ProductCarousel from '../../components/product/ProductCarousel'\r\nimport Loader from '../../components/shared/Loader'\r\nimport Message from '../../components/shared/Message'\r\nimport { listProducts } from '../../actions/productActions'\r\n\r\nimport './css/home.css'\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n\r\n    // A redux hook that dispatches an action. Like setState, but redux\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Chooses the productList from the dictionary of reducers in store.js and other files\r\n    const productList = useSelector( (state) => state.productList)\r\n\r\n    // Destructured variables pulled from the state\r\n    const { loading, error, products, page, pages } = productList\r\n\r\n    // @ todo: pickup @ 9:30 min mark https://www.udemy.com/course/django-with-react-an-ecommerce-website/learn/lecture/24599974\r\n\r\n    let urlParams = history.location.search\r\n\r\n    let pageParam = new URLSearchParams(history.location.search).get('page')\r\n\r\n    console.log('pageParam =', pageParam)\r\n    console.log('urlParams =', urlParams)\r\n\r\n    // Use effect triggers when the component loads or a state updates. (Triggers when dispatch changes)\r\n    useEffect( () => {\r\n\r\n        // A redux action defined in productActions.js that fetches the list of items using axios.\r\n        dispatch(listProducts(urlParams))\r\n\r\n    }, [dispatch, urlParams])\r\n\r\n    return (\r\n\r\n        <div>\r\n            {\r\n                /* Only show the carousel when the user isn't searching. */\r\n                (!pageParam || pageParam === '1' || !urlParams) && <ProductCarousel />\r\n            }\r\n            \r\n            <h1 className=\"latest-products-banner\">Latest Products</h1>\r\n\r\n            {/* Check first if the items are loading, if not, display error. If it's loaded, display the items */}\r\n            {\r\n                loading ? <Loader />\r\n                    : error ? <Message variant=\"danger\">{error}</Message>\r\n                        : (\r\n                            <div>\r\n                                <Row>\r\n                                    {products.map( product => (\r\n                                        <Col key={product.id} sm={12} md={6} lg={4} xl={3}>\r\n                                            <Product product={product} classProp=\"home-product-img\" />\r\n                                        </Col>\r\n                                    ))}\r\n                                </Row>\r\n\r\n                                <Paginate page={page} pages={pages} urlParams={urlParams}/>\r\n                            </div>\r\n                        )\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\n\r\nfunction FormContainer({ children }) {\r\n\r\n    return (\r\n\r\n        <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col xs={12} md={6}>\r\n                    {/* Form */}\r\n                    { children }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default FormContainer\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\n\r\nimport Loader from '../../components/shared/Loader'\r\nimport Message from '../../components/shared/Message'\r\nimport FormContainer from '../../components/shared/FormContainer'\r\n\r\nimport { login } from '../../actions/userActions'\r\n\r\nimport './css/user.css'\r\n\r\n\r\nfunction LoginScreen({ location, history }) {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    // A redux hook that dispatches an action. Like setState, but redux\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Get the querystring in the URL parameters and store its value in redirect if possible.\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n    //console.log('redirect', location)\r\n\r\n    // Get userLogin variables from the state.\r\n    const userLogin = useSelector( (state) => state.userLogin )\r\n    const { loading, userInfo, error } = userLogin\r\n\r\n    // Trigger state change when history, userInfo, or redirect changes.\r\n    useEffect( () => {\r\n\r\n        // If the user is logged in, redirect the user to \r\n        if (userInfo) {\r\n\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    // Handles when the user clicks the \"Sign In\" button.\r\n    const submitHandler = (event) => {\r\n\r\n        // Prevents the form from being submitted.\r\n        event.preventDefault()\r\n\r\n        // Call the login function\r\n        dispatch( login(email, password) )\r\n    }\r\n\r\n    return (\r\n\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n\r\n            { error && <Message variant=\"danger\">{ error }</Message> }\r\n\r\n            { loading && <Loader /> }\r\n\r\n            <Form onSubmit={ submitHandler }>\r\n                <Form.Group controlId=\"email\" className=\"login__form\">\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        value={email}\r\n                        onChange={ (event) => setEmail(event.target.value) }\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"password\" className=\"login__form login__form--password\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={ (event) => setPassword(event.target.value) }\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button className=\"btn-conglomerate\" type=\"submit\" variant=\"primary\">Sign In</Button>\r\n\r\n            </Form>\r\n\r\n            <Row className=\"py-3\">\r\n                <Col>\r\n                    New Customer?&nbsp;\r\n                    <Link\r\n                        /* Check if redirect is there, if not, go to the register page. */\r\n                        to={ redirect ? `/register?redirect=${ redirect }` : '/register' }\r\n                    >\r\n                        Register\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </FormContainer>\r\n\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\n\r\nimport Loader from '../../components/shared/Loader'\r\nimport Message from '../../components/shared/Message'\r\nimport FormContainer from '../../components/shared/FormContainer'\r\n\r\nimport { register } from '../../actions/userActions'\r\n\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n    // State variables.\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    // A redux hook that dispatches an action. Like setState, but redux\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Get the querystring in the URL parameters and store its value in redirect if possible.\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    // Get userRegister variables from the state.\r\n    const userRegister = useSelector( (state) => state.userRegister )\r\n    const { loading, userInfo, error } = userRegister\r\n\r\n    // Trigger state change when history, userInfo, or redirect changes.\r\n    useEffect( () => {\r\n\r\n        // If the user is logged in, redirect the user to \r\n        if (userInfo) {\r\n\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    // Handles when the user clicks the \"Sign In\" button.\r\n    const submitHandler = (event) => {\r\n\r\n        // Prevents the form from being submitted.\r\n        event.preventDefault()\r\n\r\n        // Show a custom error if the password is not equal to the confirmed password field.\r\n        // If they do, dispatch the register action.\r\n        if (password !== confirmPassword) {\r\n\r\n            setMessage('Passwords do not match.')\r\n        }\r\n        else {\r\n\r\n            // Call the regsiter action -> reducer -> update state\r\n            dispatch( register(name, email, password) )\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <FormContainer>\r\n            <h1>Register</h1>\r\n\r\n            {/* This error shows when the passwords don't match */}\r\n            { message && <Message variant=\"danger\">{ message }</Message> }\r\n\r\n            {/* This error shows when something like an email already exists for that username. */}\r\n            { error && <Message variant=\"danger\">{ error }</Message> }\r\n\r\n            { loading && <Loader /> }\r\n\r\n            <Form onSubmit={ submitHandler }>\r\n                <Form.Group controlId=\"name\" className=\"register__form\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        type=\"name\"\r\n                        placeholder=\"Name\"\r\n                        value={name}\r\n                        onChange={ (event) => setName(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"email\" className=\"register__form\">\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        value={email}\r\n                        onChange={ (event) => setEmail(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"password\" className=\"register__form\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={ (event) => setPassword(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"passwordConfirm\" className=\"register__form\">\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm Password\"\r\n                        value={confirmPassword}\r\n                        onChange={ (event) => setConfirmPassword(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button className=\"btn-conglomerate register-btn\" type=\"submit\" variant=\"primary\">Register</Button>\r\n            </Form>\r\n\r\n            <Row className=\"py-3\">\r\n                <Col>\r\n                    Have an Account?&nbsp;\r\n                    <Link\r\n                        /* Check if redirect is there, if not, go to the register page. */\r\n                        to={ redirect ? `/login?redirect=${ redirect }` : '/login' }\r\n                    >\r\n                        Sign In\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </FormContainer>\r\n\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nimport Loader from '../../components/shared/Loader'\r\nimport Message from '../../components/shared/Message'\r\n\r\nimport { getUserDetails, updateUserProfile } from '../../actions/userActions'\r\nimport { listMyOrders } from '../../actions/orderActions'\r\n\r\nimport { USER_UPDATE_PROFILE_RESET } from '../../constants/userConstants'\r\n\r\nimport './css/user.css'\r\n\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    // State variables.\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    // A redux hook that dispatches an action. Like setState, but redux\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Get userDetails variables from the state.\r\n    const userDetails = useSelector( (state) => state.userDetails )\r\n    const { loading, user, error } = userDetails\r\n\r\n    // Get userLogin variable from the state.\r\n    const userLogin = useSelector( (state) => state.userLogin )\r\n    const { userInfo } = userLogin\r\n\r\n    // Get userUpdateProfile variable from the state.\r\n    // The success variable, when set to true, will call an action to reset the state.\r\n    const userUpdateProfile = useSelector( (state) => state.userUpdateProfile )\r\n    const { success } = userUpdateProfile\r\n\r\n    // Get nested state variables within the parent orderListMy state variable.\r\n    const orderListMy = useSelector( (state) => state.orderListMy )\r\n    const { loading:loadingOrders, error:errorOrders, orders } = orderListMy\r\n\r\n    // Trigger state change when history, userInfo, or redirect changes.\r\n    useEffect( () => {\r\n\r\n        // If the user isn't logged in, redirect user to the login page.\r\n        // If the user is logged in, \r\n        if (!userInfo) {\r\n\r\n            history.push('/login')\r\n        }\r\n        else {\r\n\r\n            // Check if the user data is loaded. If not, get it.\r\n            // Also checks if the user has just updated their profile (success=true).\r\n            if ( !user || !user.first_name || success ) {\r\n\r\n                // Resets the profile\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n\r\n                // idOrPage is part of URL: /api/v1/users/${idOrPage}/, which is 'profile'.\r\n                dispatch(getUserDetails('profile'))\r\n            }\r\n            else {\r\n\r\n                // Update state with user's name and email.\r\n                setName(user.first_name + ' ' + user.last_name)\r\n                setEmail(user.email)\r\n            }\r\n\r\n            // Dispatch action to pull from the API a list of the customer's carts and orders.\r\n            dispatch(listMyOrders())\r\n        }\r\n    }, [dispatch, history, user, userInfo, success])\r\n\r\n    // Handles when the user clicks the \"Sign In\" button.\r\n    const submitHandler = (event) => {\r\n\r\n        // Prevents the form from being submitted.\r\n        event.preventDefault()\r\n\r\n        // Password validation\r\n        // Show a custom error if the password is not equal to the confirmed password field.\r\n        // If they do, dispatch the register action.\r\n        if (password !== confirmPassword) {\r\n\r\n            setMessage('Passwords do not match.')\r\n        }\r\n        else if (password.length < 7 || confirmPassword < 7) {\r\n\r\n            setMessage('Please use a password with more than 7 characters.')\r\n        }\r\n        else {\r\n\r\n            // Call the update user profile action -> reducer -> update state\r\n            dispatch(updateUserProfile({\r\n                'id': user.id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n\r\n            // Clear any previous messages.\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Row>\r\n            <Col className=\"profile\" md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                {/* This error shows when the passwords don't match */}\r\n                { message && <Message variant=\"danger\">{ message }</Message> }\r\n\r\n                {/* This error shows when something like an email already exists for that username. */}\r\n                { error && <Message variant=\"danger\">{ error }</Message> }\r\n\r\n                { loading && <Loader /> }\r\n\r\n                <Form onSubmit={ submitHandler }>\r\n                    <Form.Group controlId=\"name\" className=\"profile__form\">\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"name\"\r\n                            placeholder=\"Name\"\r\n                            value={name}\r\n                            onChange={ (event) => setName(event.target.value) }\r\n                            required\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"email\" className=\"profile__form\">\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={email}\r\n                            onChange={ (event) => setEmail(event.target.value) }\r\n                            required\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\" className=\"profile__form\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={password}\r\n                            onChange={ (event) => setPassword(event.target.value) }\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"passwordConfirm\" className=\"profile__form\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            value={confirmPassword}\r\n                            onChange={ (event) => setConfirmPassword(event.target.value) }\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button className=\"btn-conglomerate profile-update-btn\" type=\"submit\" variant=\"primary\">Update</Button>\r\n                </Form>\r\n            </Col>\r\n\r\n            <Col md={7}>\r\n                <h2>My Orders</h2>\r\n                {\r\n                    loadingOrders ? (\r\n                        <Loader />\r\n                    ) : (\r\n                        errorOrders ? (\r\n                            <Message variant=\"danger\">{errorOrders}</Message>\r\n                        ) : (\r\n                            <Table striped responsive className=\"table-sm\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        <th>Payed</th>\r\n                                        <th>Delivered</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {\r\n                                        orders.map( (order) => (\r\n                                            <tr key={order.id}>\r\n                                                <td>{order.id}</td>\r\n                                                <td>{order.created_at.substring(0, 10)}</td>\r\n                                                <td>${order.total_price}</td>\r\n                                                <td>\r\n                                                    {\r\n                                                        order.is_paid ? order.paid_at.substring(0, 10) : (\r\n                                                            <i className=\"fas fa-times\" style={{ color: 'red' }}></i>\r\n                                                        )\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <LinkContainer to= {`/order/${order.id}`}>\r\n                                                        <Button className=\"btn-conglomerate btn-sm\">Details</Button>\r\n                                                    </LinkContainer>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                        )\r\n                    )\r\n                }\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import axios from 'axios'\r\n\r\nimport { \r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n} from '../constants/orderConstants'\r\nimport { domainURL } from '../constants/domainConstants'\r\n\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\nimport { csrftoken } from '../components/shared/Csrf'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // userReducers.js case\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        //console.log('Sending post request...', 'Csrftoken:', '| Authorization:', `Bearer ${userInfo.token}`)\r\n\r\n        // Update the user data and store that in a variable 'data', which is fetched from the API via axios.\r\n        // API takes in name, email and password.\r\n        const { data } = await axios.post(\r\n            `${domainURL}/api/v1/cart/add/`,\r\n            order,\r\n            config\r\n        )\r\n        .catch( (error) => console.log('axios post error:', error))\r\n\r\n        //console.log('Returned data:', data)\r\n\r\n        // Get the user data after making the API profile update call. Calls the reducer to update the state.\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // After user has payed for the cart, clear it from the state.\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        // Remove the cart data from the local storage too.\r\n        localStorage.removeItem('cartItems')\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // userReducers.js case\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        // Get order/cart data from a created cart.\r\n        const { data } = await axios.get(\r\n            `${domainURL}/api/v1/cart/${id}/`,\r\n            config\r\n        )\r\n        .catch( (error) => console.log('axios get error:', error))\r\n\r\n        // Get the user data after making the API profile update call. Calls the reducer to update the state.\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // userReducers.js case\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        // Get order/cart data from a created cart.\r\n        const { data } = await axios.put(\r\n            `${domainURL}/api/v1/cart/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        )\r\n        .catch( (error) => console.log('axios post error:', error))\r\n\r\n        // Get the user data after making the API profile update call. Calls the reducer to update the state.\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n\r\n    try {\r\n\r\n        // userReducers.js case\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        // Get from the state userInfo, which will get the JWT access token in the config variable.\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        // Send additional headers data to the API call.\r\n        const config = {\r\n\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        // Get order/cart data from a created cart.\r\n        const { data } = await axios.get(\r\n            `${domainURL}/api/v1/my-orders/`,\r\n            config\r\n        )\r\n        .catch( (error) => console.log('axios post error:', error))\r\n\r\n        // Get the user data after making the API profile update call. Calls the reducer to update the state.\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        // Start product reducer with the specified case type\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport Rating from '../../components/product/Rating'\r\nimport Loader from '../../components/shared/Loader'\r\nimport Message from '../../components/shared/Message'\r\nimport { listProductDetails, createProductReview } from '../../actions/productActions'\r\n\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../../constants/productConstants'\r\n\r\nimport './css/product_screen.css'\r\n\r\n// match holds the specific object (item) information. Passed from App.js via route\r\nfunction ProductScreen({ match, history }) {\r\n\r\n    const [quantity, setQuantity] = useState(1)\r\n\r\n    // Review variables\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    // A redux hook that dispatches an action. Like setState, but redux\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // useSelector hook. Pull from the current state, the productDetails (productDetails is defined in the reducer constant in store.js)\r\n    // Unpack variables from the productDetails state\r\n    const productDetails = useSelector( (state) => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    // Get the logged in user information from their state.\r\n    const userLogin = useSelector( (state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    // Get the state variables from the productReviewCreate parent state variable.\r\n    const productReviewCreate = useSelector( (state) => state.productReviewCreate)\r\n    const { loading:loadingProductReview, success:successProductReview, error:errorProductReview } = productReviewCreate\r\n\r\n    // Use effect triggers when the component loads or a state updates (dictated by the empty array). Triggers after dispatch or match changes.\r\n    useEffect( () => {\r\n\r\n        // After the customer submits a review, reset the rating and comments in\r\n        // the form fields, and clear the productReviewCreate state variable.\r\n        if (successProductReview) {\r\n\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n        }\r\n\r\n        // Initiate the listProductDetails action and pass in the item's id to get the right API URL.\r\n        dispatch(listProductDetails(match.params.id))\r\n\r\n    }, [dispatch, match, successProductReview])\r\n\r\n    const addToCartHandler = () => {\r\n\r\n        // Push to session history. Redirects to the specified URL.\r\n        history.push(`/cart/${match.params.id}?quantity=${quantity}`)\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n        \r\n        //\r\n        dispatch(createProductReview(\r\n            match.params.id,\r\n            { rating, comment }\r\n        ))\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Link to=\"/\" className='go-back-btn btn btn-ligh my-3'>Go Back</Link>\r\n\r\n            {\r\n                loading ? <Loader /> \r\n                    : error ? <Message variant='danger'>{error}</Message>\r\n                        : (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Image src={product?.image?.file ?? \"\"} alt={product.name} fluid />\r\n                                    </Col>\r\n                    \r\n                                    <Col md={3}>\r\n                                        <ListGroup variant=\"flush\">\r\n                                            <ListGroup.Item className=\"item__detail item__detail--top\">\r\n                                                <h3 className=\"item__title\">{product.title}</h3>\r\n                                            </ListGroup.Item>\r\n                    \r\n                                            <ListGroup.Item className=\"item__detail\">\r\n                                                <Rating value={product.rating} text={`${product.quantity_reviews} reviews`} color={'#f8e825'} />\r\n                                            </ListGroup.Item>\r\n                    \r\n                                            <ListGroup.Item className=\"item__detail\">\r\n                                                <span className=\"item__detail__price\"n>Price: </span><span className=\"item__detail__price__monie\">${product.price}</span>\r\n                                            </ListGroup.Item>\r\n                    \r\n                                            <ListGroup.Item className=\"item__detail item__text\" dangerouslySetInnerHTML={{ __html: `<p class=\"item__description\">Description:</p>${product.description}` }}>\r\n                                            </ListGroup.Item>\r\n                                        </ListGroup>\r\n                                    </Col>\r\n                    \r\n                                    <Col md={3}>\r\n                                        <Card>\r\n                                            <ListGroup variant=\"flush\">\r\n                                                <ListGroup.Item>\r\n                                                    <Row>\r\n                                                        <Col>Price:</Col>\r\n                                                        <Col>\r\n                                                            <strong>${product.price}</strong>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                    \r\n                                                <ListGroup.Item>\r\n                                                    <Row>\r\n                                                        <Col>Status:</Col>\r\n                                                        <Col>\r\n                                                            {product.quantity_in_stock > 0 ? 'In Stock' : 'Out of Stock'}\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n\r\n                                                {product.quantity_in_stock > 0 && (\r\n                                                    <ListGroup.Item>\r\n                                                        <Row>\r\n                                                            <Col>Qty</Col>\r\n                                                            <Col className='my-1' xs='auto'>\r\n                                                                <Form.Control\r\n                                                                    as=\"select\"\r\n                                                                    value={quantity}\r\n                                                                    onChange={ (e) => setQuantity(e.target.value) }\r\n                                                                >\r\n                                                                    {\r\n                                                                        [...Array(product.quantity_in_stock).keys()].map( (currentCount) => (\r\n                                                                            <option key={currentCount + 1} value={currentCount + 1}>\r\n                                                                                {/* Compensate for the fact that the array starts with 0 */}\r\n                                                                                {currentCount + 1}\r\n                                                                            </option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </Form.Control>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                )}\r\n                    \r\n                                                <ListGroup.Item>\r\n                                                    <Button\r\n                                                        className=\"add-btn btn-block btn-conglomerate\"\r\n                                                        onClick={ addToCartHandler }\r\n                                                        disabled={product.quantity_in_stock <= 0 }\r\n                                                        type=\"button\"\r\n                                                    >\r\n                                                        Add to Cart\r\n                                                    </Button>\r\n                                                </ListGroup.Item>\r\n                                            </ListGroup>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"reviews\">\r\n                                    <Col md={6}>\r\n                                    <h4>Reviews</h4>\r\n                                        {/* @ todo: When pressing ctrl + shift + r on a page with a review, it will say it can't access product.review_data.length */}\r\n                                        { product?.review_data?.length === 0 && <Message variant='info'>No reviews</Message> }\r\n\r\n                                        <ListGroup variant=\"flush\">\r\n                                            {\r\n                                                product?.review_data?.map( (review) => (\r\n\r\n                                                    <ListGroup.Item className=\"reviews__review\" key={review.id}>\r\n                                                        <strong>{ review.name }</strong>\r\n                                                        <Rating value={ review.rating } color=\"#f8e825\" />\r\n                                                        <p>{ review.created_at.substring(0, 10) }</p>\r\n                                                        <p>{ review.comment }</p>\r\n                                                    </ListGroup.Item>\r\n                                                ))\r\n                                            }\r\n                                            <ListGroup.Item className=\"reviews__forms\">\r\n                                                <h4>Write a review</h4>\r\n\r\n                                                { loadingProductReview && <Loader /> }\r\n                                                \r\n                                                { successProductReview && <Message variant=\"success\">Review submitted!</Message> }\r\n\r\n                                                { errorProductReview && <Message variant=\"danger\">{errorProductReview}</Message> }\r\n\r\n                                                {\r\n                                                    userInfo ? (\r\n                                                        <Form onSubmit={submitHandler}>\r\n                                                            <Form.Group controlId=\"rating\" className=\"reviews__forms__form\">\r\n                                                                <Form.Label>Rating</Form.Label>\r\n                                                                <Form.Control\r\n                                                                    as=\"select\"\r\n                                                                    value={rating}\r\n                                                                    onChange={ (event) => setRating(event.target.value) }\r\n                                                                >\r\n                                                                    <option value=\"\">Select...</option>\r\n                                                                    <option value=\"1\">1 - Poor</option>\r\n                                                                    <option value=\"2\">2 - Fair</option>\r\n                                                                    <option value=\"3\">3 - Good</option>\r\n                                                                    <option value=\"4\">4 - Very Good</option>\r\n                                                                    <option value=\"5\">5 - Excellent</option>\r\n                                                                </Form.Control>\r\n                                                            </Form.Group>\r\n\r\n                                                            <Form.Group controlId=\"comment\" className=\"reviews__forms__form\">\r\n                                                                <Form.Label>Review</Form.Label>\r\n                                                                <Form.Control\r\n                                                                    as=\"textarea\"\r\n                                                                    row=\"5\"\r\n                                                                    value={ comment }\r\n                                                                    placeholder=\"Have a review to share?\"\r\n                                                                    onChange={ (event) => setComment(event.target.value) }\r\n                                                                >\r\n\r\n                                                                </Form.Control>\r\n                                                            </Form.Group>\r\n\r\n                                                            <Button\r\n                                                                disabled={ loadingProductReview }\r\n                                                                type=\"submit\"\r\n                                                                variant=\"primary\"\r\n                                                                className=\"btn-conglomerate reviews__forms__btn\"\r\n                                                            >\r\n                                                                Submit\r\n                                                            </Button>\r\n                                                        </Form>\r\n                                                    ) : (\r\n                                                        <Message variant=\"info\">Please <Link to=\"/login\">Login</Link> to write a review</Message>\r\n                                                    )\r\n                                                }\r\n                                            </ListGroup.Item>\r\n                                        </ListGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                        )\r\n\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n    //}\r\n\r\n}\r\n\r\nexport default ProductScreen\r\n","// After being dispatched, the action will update the state and do other logic.\r\n\r\nimport axios from 'axios'\r\nimport {\r\n    CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD\r\n} from '../constants/cartConstants'\r\nimport { domainURL } from '../constants/domainConstants'\r\n\r\nexport const addToCart = (productId, quantity) => async(dispatch, getState) => {\r\n    // getState is like useSelector. Can get parts or all of the state.\r\n\r\n    const { data } = await axios.get(`${domainURL}/api/v1/item/${productId}`)\r\n\r\n    dispatch({\r\n        type: CART_ADD_ITEM,\r\n        payload: {\r\n            id: data.id,\r\n            name: data.title,\r\n            image: data.image.file,\r\n            price: data.price,\r\n            countInStock: data.quantity_in_stock,\r\n            quantity\r\n        }\r\n    })\r\n\r\n    // Store item in local storage, so when the user revisits the website, their cart will still be there.\r\n    // Is cart the cartReducer?\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n\r\n}\r\n\r\nexport const removeFromCart = (id) => (dispatch, getState) => {\r\n\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id\r\n    })\r\n\r\n    // Update the cartItems variable in local storage after removing the item.\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const saveShippingAddress = (data) => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: CART_SAVE_SHIPPING_ADDRESS,\r\n        payload: data\r\n    })\r\n\r\n    // Update/create the shippingAddress variable in local storage after removing the item.\r\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\r\n}\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: CART_SAVE_PAYMENT_METHOD,\r\n        payload: data\r\n    })\r\n\r\n    // Update/create the shippingAddress variable in local storage after removing the item.\r\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n}","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\nimport Message from '../../components/shared/Message'\r\nimport { addToCart, removeFromCart } from '../../actions/cartActions'\r\n\r\n\r\nfunction CartScreen({ match, location, history }) {\r\n    // Destructure to get data from browser and url.\r\n\r\n    const productId = match.params.id\r\n\r\n    // Get parameters in URL. If it exists, get the order item quantity from the URL.\r\n    const quantity = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Pull data from the state (cart item data) and destructure to get the cartItems variable.\r\n    const cart = useSelector( (state) => state.cart )\r\n    const { cartItems } = cart\r\n\r\n    useEffect( () => {\r\n\r\n        // Only if there's a product Id, will the addToCart action trigger.\r\n        if (productId) {\r\n\r\n            // Updates the state and adds the item to the user's local storage on their browser.\r\n            dispatch(addToCart(productId, quantity))\r\n        }\r\n\r\n        // Will not trigger when dispatch, productId, or quantity have not changed when states are changed.\r\n    }, [dispatch, productId, quantity])\r\n\r\n    //console.log('cartItems:', cartItems)\r\n\r\n    // Handles the delete from cart icon.\r\n    const removeFromCartHandler = (id) => {\r\n\r\n        // Remove the item with the specified id from the cart via a Redux action.\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    // Handles when the user clicks the available checkout button.\r\n    const checkoutHandler = () => {\r\n\r\n        /* If the user is logged in, send them to the shipping page, and if not go to the login page. */\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n\r\n    return (\r\n\r\n        <Row>\r\n            <Col md={8}>\r\n                <h1>Shopping Cart</h1>\r\n\r\n                {\r\n                    cartItems.length === 0 ? (\r\n\r\n                        <Message variant=\"info\">\r\n                            Your cart is empty <Link to=\"/\">Go Back</Link>\r\n                        </Message>\r\n\r\n                    ) : (\r\n\r\n                            <ListGroup variant=\"flush\">\r\n\r\n                                {\r\n                                    cartItems.map( (item) => (\r\n                                    \r\n                                        <ListGroup.Item key={ item.id }>\r\n                                            <Row>\r\n                                                <Col md={2}>\r\n                                                    <Image src={ item.image } alt={ item.name } fluid rounded />\r\n                                                </Col>\r\n                                                \r\n                                                <Col md={3}>\r\n                                                    <Link to={`/product/${ item.id }`}>{ item.name }</Link>\r\n                                                </Col>\r\n\r\n                                                <Col md={2}>\r\n                                                    ${ Number(item.price) }\r\n                                                </Col>\r\n\r\n                                                <Col md={3}>\r\n                                                    <Form.Control\r\n                                                        as=\"select\"\r\n                                                        value={ item.quantity }\r\n                                                        onChange={ (event) => dispatch(addToCart(item.id, Number(event.target.value))) }\r\n                                                    >\r\n                                                        {\r\n                                                            [...Array(item.countInStock).keys()].map( (currentCount) => (\r\n                                                                <option key={currentCount + 1} value={currentCount + 1}>\r\n                                                                    {/* Compensate for the fact that the array starts with 0 */}\r\n                                                                    {currentCount + 1}\r\n                                                                </option>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n\r\n                                                <Col md={1}>\r\n                                                    <Button\r\n                                                        type=\"button\"\r\n                                                        variant=\"light\"\r\n                                                        onClick={ () => removeFromCartHandler(item.id) }\r\n                                                    >\r\n                                                        <i className=\"fas fa-trash\"></i>\r\n                                                    </Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))\r\n                                }\r\n\r\n                            </ListGroup>\r\n                    )\r\n                }\r\n            </Col>\r\n\r\n            <Col md={4}>\r\n                <Card>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>\r\n                            {/* Add all of the item counts together */}\r\n                            <h2>Subtotal ({ cartItems.reduce( (accumulator, item) => accumulator + item.quantity, 0 ) }) items</h2>\r\n\r\n                            ${ cartItems.reduce( (accumulator, item) => accumulator + item.quantity * item.price, 0 ).toFixed(2) }\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n\r\n                    <ListGroup>\r\n                        <Button\r\n                            type=\"button\"\r\n                            className=\"btn-conglomerate btn-block\"\r\n                            disabled={ cartItems.length === 0 }\r\n                            onClick={ checkoutHandler }\r\n                        >\r\n                            Proceed to Checkout\r\n                        </Button>\r\n                    </ListGroup>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default CartScreen\r\n","import React from 'react'\r\nimport { Nav } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\n\r\nfunction CheckoutSteps({ step1, step2, step3, step4 }) {\r\n\r\n    return (\r\n\r\n        <Nav className=\"justify-content-center mb-4\">\r\n            \r\n            <Nav.Item>\r\n                {\r\n                    step1 ? (\r\n\r\n                        <LinkContainer to=\"/login\">\r\n                            <Nav.Link>Login</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                    ) : (\r\n\r\n                        <Nav.Link disabled>Login</Nav.Link>\r\n\r\n                    )\r\n                }\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {\r\n                    step2 ? (\r\n\r\n                        <LinkContainer to=\"/shipping\">\r\n                            <Nav.Link>Shipping</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                    ) : (\r\n\r\n                        <Nav.Link disabled>Shipping</Nav.Link>\r\n\r\n                    )\r\n                }\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {\r\n                    step3 ? (\r\n\r\n                        <LinkContainer to=\"/payment\">\r\n                            <Nav.Link>Payment</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                    ) : (\r\n\r\n                        <Nav.Link disabled>Payment</Nav.Link>\r\n\r\n                    )\r\n                }\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {\r\n                    step4 ? (\r\n\r\n                        <LinkContainer to=\"/place-order\">\r\n                            <Nav.Link>Place Order</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                    ) : (\r\n\r\n                        <Nav.Link disabled>Place Order</Nav.Link>\r\n\r\n                    )\r\n                }\r\n            </Nav.Item>\r\n\r\n        </Nav>\r\n\r\n    )\r\n}\r\n\r\nexport default CheckoutSteps\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nimport FormContainer from '../../components/shared/FormContainer'\r\nimport CheckoutSteps from '../../components/cart/CheckoutSteps'\r\n\r\nimport { saveShippingAddress } from '../../actions/cartActions'\r\n\r\nimport './css/cart.css'\r\n\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n    // Get shipping address from the cart state variable.\r\n    const cart = useSelector( (state) => state.cart )\r\n    const { shippingAddress } = cart\r\n\r\n    // Get userLogin variable from the state. Will use to see if the user can access this page.\r\n    const userLogin = useSelector( (state) => state.userLogin )\r\n    const { userInfo } = userLogin\r\n\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Initialize the state variables and set the default to whatever the current state is.\r\n    // Pre-populates if the user's state contains the shippingAddress and is not empty.\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n\r\n        // Saves the user's address to the local storage and updates the state.\r\n        // Will automatically send as a key/value pair.\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n\r\n        // Send the customer to the payment page after sending in the shipping address data.\r\n        history.push('/payment')\r\n    }\r\n \r\n    // Verifies that the user is logged in by checking if their userInfo state variable\r\n    // contains information.\r\n    // Triggers after initial render and when the userInfo state variable changes.\r\n    useEffect( () => {\r\n        \r\n        if (!userInfo) {\r\n\r\n            history.push('/login')\r\n        }\r\n    }, [userInfo, history])\r\n\r\n    return (\r\n\r\n        <FormContainer>\r\n\r\n            <CheckoutSteps step1 step2 />\r\n\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={ submitHandler }>\r\n\r\n                <Form.Group controlId=\"address\" className=\"address__form\">\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter address\"\r\n                        value={address ? address : ''}\r\n                        onChange={ (event) => setAddress(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"city\" className=\"address__form\">\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter city\"\r\n                        value={city ? city : ''}\r\n                        onChange={ (event) => setCity(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"postalCode\" className=\"address__form\">\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter postal code\"\r\n                        value={postalCode ? postalCode : ''}\r\n                        onChange={ (event) => setPostalCode(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"country\" className=\"address__form\">\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter country\"\r\n                        value={country ? country : ''}\r\n                        onChange={ (event) => setCountry(event.target.value) }\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button className=\"btn-conglomerate shipping-continue-btn\" type=\"submit\" variant=\"primary\">Continue</Button>\r\n\r\n            </Form>\r\n        </FormContainer>\r\n\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\n\r\nimport FormContainer from '../../components/shared/FormContainer'\r\nimport CheckoutSteps from '../../components/cart/CheckoutSteps'\r\n\r\nimport { savePaymentMethod } from '../../actions/cartActions'\r\n\r\n\r\nfunction PaymentScreen({ history }) {\r\n\r\n    // Get shipping address from the cart state variable.\r\n    const cart = useSelector( (state) => state.cart )\r\n    const { shippingAddress } = cart\r\n\r\n    // If the user doesn't have an address saved, redirect the user to the shipping page.\r\n    if (!shippingAddress.address) {\r\n\r\n        history.push('/shipping')\r\n    }\r\n\r\n    // dispatch is used to trigger an action\r\n    const dispatch = useDispatch()\r\n\r\n    // Initialize some state variables\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    // Handles when the user submits payment information\r\n    const submitHandler = (event) => {\r\n\r\n        event.preventDefault()\r\n\r\n        // Save the payment method in the cart as paymentMethod under the cart state variable.\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n\r\n        // After entering payment, send user to the next page\r\n        history.push('/place-order')\r\n    }\r\n\r\n    return (\r\n        \r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n            \r\n            <Form onSubmit={ submitHandler }>\r\n                <Form.Group>\r\n                    <Form.Label className=\"payment__legend\" as=\"legend\">Select Method</Form.Label>\r\n                    <Col>\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"PayPal or Credit Card\"\r\n                            id=\"paypal\"\r\n                            name=\"paymentMethod\"\r\n                            checked\r\n                            onChange={ (event) => setPaymentMethod(event.target.value) }\r\n                        >\r\n\r\n                        </Form.Check>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Button className=\"btn-conglomerate payment-continue-btn\" type=\"submit\" variant=\"primary\">Continue</Button>\r\n            </Form>\r\n            \r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Button, Row, Col, ListGroup, Image } from 'react-bootstrap'\r\n\r\nimport Message from '../../components/shared/Message'\r\nimport CheckoutSteps from '../../components/cart/CheckoutSteps'\r\n\r\nimport { createOrder } from '../../actions/orderActions'\r\n\r\nimport { ORDER_CREATE_RESET } from '../../constants/orderConstants'\r\n\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    // Get order, success, and error variables from orderCreate, which is part of the state.\r\n    const orderCreate = useSelector( (state) => state.orderCreate )\r\n    const { order, success, error } = orderCreate\r\n\r\n    //console.log('order', order)\r\n\r\n    // From Redux. Enables action dispatch.\r\n    const dispatch = useDispatch()\r\n\r\n    // Get the cart variable in the list of state variables.\r\n    const cart = useSelector( (state) => state.cart )\r\n\r\n    // Adds the total cost of all items as an attribute to cart (state variable) that is only available for this page.\r\n    cart.itemsPrice = cart.cartItems.reduce( (acc, item) => acc + item.price * item.quantity, 0 ).toFixed(2)\r\n\r\n    // If the total is over $100, shipping is free. Otherwise, there is a $10 shipping fee\r\n    cart.shippingPrice = parseFloat(cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n\r\n    // Illinois tax rate is 6.25% generally. Shipping price is taxed too.\r\n    cart.taxPrice = Number((0.0625) * ( Number(cart.itemsPrice) + Number(cart.shippingPrice) ) ).toFixed(2)\r\n\r\n    // Get the grand total for the customer cart.\r\n    cart.totalPrice = ( Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice) ).toFixed(2)\r\n\r\n    // If the paymentMethod isn't in the state (did not set in Redux store)\r\n    // redirect the user back to the payment page to store that data again\r\n    if (!cart.paymentMethod) {\r\n\r\n        history.push('/payment')\r\n    }\r\n\r\n    //\r\n    useEffect( () => {\r\n\r\n        if (success) {\r\n\r\n            history.push(`/order/${order.id}`)\r\n            \r\n            // After clicking the button, clear the orderCreate state variable.\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n            \r\n        }\r\n\r\n    }, [success, history])\r\n\r\n    // Handles the logic after user clicks on the place order button.\r\n    const placeOrder = () => {\r\n\r\n        dispatch( createOrder({\r\n            orders: cart.cartItems,\r\n            shipping_address: cart.shippingAddress,\r\n            payment_method: cart.paymentMethod,\r\n            items_price: cart.itemsPrice,\r\n            shipping_price: cart.shippingPrice,\r\n            tax_price: cart.taxPrice,\r\n            total_price: cart.totalPrice\r\n        }) )\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant=\"flush\">\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Shipping</h2>\r\n                            <p className=\"checkout__banner__detail\">\r\n                                {/* <strong>Shipping: </strong> */}\r\n                                { cart.shippingAddress.address }, { cart.shippingAddress.city }\r\n                                {'  '}\r\n                                { cart.shippingAddress.postalCode },\r\n                                {'  '}\r\n                                { cart.shippingAddress.country }\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Payment Method</h2>\r\n                            <p className=\"checkout__banner__detail\">\r\n                                {/* <strong>Method: </strong> */}\r\n                                { cart.paymentMethod }\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Order Items</h2>\r\n\r\n                            {\r\n                                cart.cartItems.length === 0 ? <Message variant=\"info\">Your cart is empty</Message>\r\n                                    : (\r\n                                        <ListGroup variant=\"flush\">\r\n                                            { cart.cartItems.map( (item, index) =>(\r\n\r\n                                                <ListGroup.Item key={item.id}>\r\n                                                    <Row>\r\n                                                        <Col md={1}>\r\n                                                            <Image src={ item.image } alt={ item.name } fluid rounded />\r\n                                                        </Col>\r\n\r\n                                                        <Col>\r\n                                                            <Link to={`/product/${item.id}`}>{ item.name }</Link>\r\n                                                        </Col>\r\n\r\n                                                        <Col md={4}>\r\n                                                            { item.quantity } x ${ item.price } = ${ (item.quantity * item.price).toFixed(2) }\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                                            )) }\r\n                                        </ListGroup>\r\n                                    )\r\n                            }\r\n                            \r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <ListGroup variant=\"flush\">\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Order Summary</h2>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Items:</Col>\r\n                                <Col>${ cart.itemsPrice }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Shipping:</Col>\r\n                                <Col>${ cart.shippingPrice }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Tax:</Col>\r\n                                <Col>${ cart.taxPrice }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Total:</Col>\r\n                                <Col>${ cart.totalPrice }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        \r\n                        {\r\n                            error &&\r\n                                <ListGroup.Item>\r\n                                    <Message variant=\"danger\">{ error }</Message>\r\n                                </ListGroup.Item>\r\n                        }\r\n                        \r\n                        <ListGroup.Item>\r\n                            <Button\r\n                                type=\"button\"\r\n                                className=\"btn-conglomerate place-order-btn btn-block\"\r\n                                disabled={ cart.cartItems === 0 }\r\n                                onClick={ placeOrder }\r\n                            >\r\n                                Place Order\r\n                            </Button>\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\n\r\nimport { Row, Col, ListGroup, Image } from 'react-bootstrap'\r\n\r\nimport Message from '../../components/shared/Message'\r\nimport Loader from '../../components/shared/Loader'\r\nimport { domainURL } from '../../constants/domainConstants'\r\nimport { ORDER_PAY_RESET } from '../../constants/orderConstants'\r\n\r\nimport { getOrderDetails, payOrder } from '../../actions/orderActions'\r\n\r\n\r\nfunction PlaceOrderScreen({ match }) {\r\n\r\n    // Get the order ID\r\n    const orderId = match.params.id\r\n\r\n    // From Redux. Enables action dispatch.\r\n    const dispatch = useDispatch()\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    // Get order, success, and error variables from orderCreate, which is part of the state.\r\n    const orderDetails = useSelector( (state) => state.orderDetails )\r\n    const { order, loading, error } = orderDetails\r\n\r\n    // Get order, success, and error variables from orderCreate, which is part of the state.\r\n    const orderPay = useSelector( (state) => state.orderPay )\r\n    const { loading:loadingPay, success:successPay } = orderPay\r\n\r\n\r\n    // Calculate the total price of the items only when the data is present from the dispatch.\r\n    if (!loading && !error) {\r\n\r\n        // Adds the total cost of all items as an attribute to cart (state variable) that is only available for this page.\r\n        // Tax, shipping, and total prices are not needed since it is loaded into the state.\r\n        order.itemsPrice = order.orders.reduce( (acc, item) => acc + item.price * item.quantity, 0 ).toFixed(2)\r\n    }\r\n\r\n    // Paypal Client ID: AWoLzZNHfQUh1jzX99Nvw8nkTjvGdGB0VhqNT1A7hNcrswl426IVeHzIWFzRBaOE7KVUSSrUX8PCd69U\r\n    const addPayPalScript = () => {\r\n\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AWoLzZNHfQUh1jzX99Nvw8nkTjvGdGB0VhqNT1A7hNcrswl426IVeHzIWFzRBaOE7KVUSSrUX8PCd69U'\r\n        script.async = true\r\n\r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        }\r\n\r\n        document.body.appendChild(script)\r\n    }\r\n\r\n    //\r\n    useEffect( () => {\r\n\r\n        // If order doesn't exist or the order ID in the URl doesn't match\r\n        // what's in the state, get the cart details. (order refers to the cart that was ordered)\r\n        if (!order || order.id !== Number(orderId) || successPay) {\r\n\r\n            // Clear the orderPay state variable. \r\n            dispatch({ type: ORDER_PAY_RESET })\r\n\r\n            // Fetch cart details.\r\n            dispatch(getOrderDetails(orderId))\r\n        }\r\n        // Show paypal buttons if the order is not paid.\r\n        else if (!order.is_paid) {\r\n\r\n                if (!window.paypal) {\r\n\r\n                    addPayPalScript()\r\n                }\r\n                else {\r\n                    setSdkReady(true)\r\n                }\r\n        }\r\n\r\n    }, [dispatch, order, orderId, successPay])\r\n\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n\r\n        <div>\r\n            <h1>Order: {order.id}</h1>\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant=\"flush\">\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Shipping</h2>\r\n                            <p><strong>Name: </strong>{order.user_data.first_name} {order.user_data.last_name}</p>\r\n                            <p><strong>Email: </strong><a href={`mailto:${order.user_data.email}`}>{order.user_data.email}</a></p>\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                { order.shipping_address_data.address }, { order.shipping_address_data.city }\r\n                                {'  '}\r\n                                { order.shipping_address_data.postalCode },\r\n                                {'  '}\r\n                                { order.shipping_address_data.country }\r\n                            </p>\r\n\r\n                            {\r\n                                order.is_delivered ? (\r\n                                    <Message variant='success'>Delivered on on {order.delivered_at}</Message>\r\n                                ) : (\r\n                                    <Message variant='warning'>Not Delivered</Message>\r\n                                )\r\n                            }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                { order.payment_method }\r\n                            </p>\r\n                            {\r\n                                order.is_paid ? (\r\n                                    <Message variant='success'>Paid on {order.paid_at}</Message>\r\n                                ) : (\r\n                                    <Message variant='warning'>Not paid</Message>\r\n                                )\r\n                            }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Order Items</h2>\r\n\r\n                            {\r\n                                order.orders.length === 0 ? <Message variant=\"info\">Your orders are empty</Message>\r\n                                    : (\r\n                                        <ListGroup variant=\"flush\">\r\n                                            { order.orders.map( (item, index) =>(\r\n\r\n                                                <ListGroup.Item key={item.id}>\r\n                                                    <Row>\r\n                                                        <Col md={1}>\r\n                                                            <Image src={ domainURL + item.image } alt={ item.name } fluid rounded />\r\n                                                        </Col>\r\n\r\n                                                        <Col>\r\n                                                            <Link to={`/product/${item.id}`}>{ item.name }</Link>\r\n                                                        </Col>\r\n\r\n                                                        <Col md={4}>\r\n                                                            { item.quantity } x ${ item.price } = ${ (item.quantity * item.price).toFixed(2) }\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                                            )) }\r\n                                        </ListGroup>\r\n                                    )\r\n                            }\r\n                            \r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <ListGroup variant=\"flush\">\r\n\r\n                        <ListGroup.Item>\r\n                            <h2 className=\"checkout__banner\">Order Summary</h2>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Items:</Col>\r\n                                <Col>${ order.itemsPrice }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Shipping:</Col>\r\n                                <Col>${ order.shipping_price }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Tax:</Col>\r\n                                <Col>${ order.tax_price }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Total:</Col>\r\n                                <Col>${ order.total_price }</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        {\r\n                            !order.is_paid && (\r\n                                <ListGroup.Item className=\"paypal-bricks\">\r\n                                    {\r\n                                        loadingPay && <Loader />\r\n                                    }\r\n                                    {\r\n                                        !sdkReady ? (\r\n                                            <Loader />\r\n                                        ) : (\r\n                                            <PayPalButton \r\n                                                amount={order.total_price}\r\n                                                onSuccess={successPaymentHandler}\r\n                                                \r\n                                            />\r\n                                        )\r\n                                    }\r\n                                </ListGroup.Item>\r\n                            )\r\n                        }\r\n\r\n\r\n\r\n\r\n                        <ListGroup.Item>\r\n                            {\r\n                                error && <Message variant=\"danger\">{ error }</Message>\r\n                            }\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","import { Container } from 'react-bootstrap'    // React bootstrap package\r\nimport { HashRouter as Router, Route } from 'react-router-dom'\r\n\r\nimport Header from './components/header/Header'\r\nimport Footer from './components/footer/Footer'\r\n\r\nimport HomeScreen from './screens/home/HomeScreen'\r\nimport LoginScreen from './screens/user/LoginScreen'\r\nimport RegisterScreen from './screens/user/RegisterScreen'\r\nimport ProfileScreen from './screens/user/ProfileScreen'\r\nimport ProductScreen from './screens/product/ProductScreen'\r\nimport CartScreen from './screens/cart/CartScreen'\r\nimport ShippingScreen from './screens/cart/ShippingScreen'\r\nimport PaymentScreen from './screens/cart/PaymentScreen'\r\nimport PlaceOrderScreen from './screens/cart/PlaceOrderScreen'\r\nimport OrderScreen from './screens/cart/OrderScreen'\r\n\r\nimport './css/main.css'\r\n\r\n\r\nfunction App() {\r\n\r\n\treturn (\r\n\r\n\t\t<Router>\r\n\t\t\t<Header />\r\n\t\t\t\r\n\t\t\t<main className=\"main py-3\">\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Route exact path='/' component={ HomeScreen } />\r\n\t\t\t\t\t<Route path='/login' component={ LoginScreen } />\r\n\t\t\t\t\t<Route path='/register' component={ RegisterScreen } />\r\n\t\t\t\t\t<Route path='/profile' component={ ProfileScreen } />\r\n\t\t\t\t\t<Route path='/product/:id' component={ ProductScreen } />\r\n\t\t\t\t\t<Route path='/cart/:id?' component={ CartScreen } />\r\n\t\t\t\t\t<Route path='/shipping' component={ ShippingScreen } />\r\n\t\t\t\t\t<Route path='/payment' component={ PaymentScreen } />\r\n\t\t\t\t\t<Route path='/place-order' component={ PlaceOrderScreen } />\r\n\t\t\t\t\t<Route path='/order/:id' component={ OrderScreen } />\r\n\t\t\t\t</Container>\r\n\t\t\t</main>\r\n\r\n\t\t\t<Footer />\r\n\t\t</Router>\r\n\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Redux stuff\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\n\r\nimport './css/index.css';\r\nimport './bootstrap.min.css'\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n/* \t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root') */\r\n\r\n\t// Use the Redux store globally throughout the app.\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}